// Code generated by MockGen. DO NOT EDIT.
// Source: acl.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vozalel/interview-crud-files/internal/entity"
	custom_error "github.com/vozalel/interview-crud-files/pkg/custom_error"
)

// MockIManagerACL is a mock of IManagerACL interface.
type MockIManagerACL struct {
	ctrl     *gomock.Controller
	recorder *MockIManagerACLMockRecorder
}

// MockIManagerACLMockRecorder is the mock recorder for MockIManagerACL.
type MockIManagerACLMockRecorder struct {
	mock *MockIManagerACL
}

// NewMockIManagerACL creates a new mock instance.
func NewMockIManagerACL(ctrl *gomock.Controller) *MockIManagerACL {
	mock := &MockIManagerACL{ctrl: ctrl}
	mock.recorder = &MockIManagerACLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIManagerACL) EXPECT() *MockIManagerACLMockRecorder {
	return m.recorder
}

// GetUserPerformACL mocks base method.
func (m *MockIManagerACL) GetUserPerformACL(ctx context.Context, user *entity.User) (entity.PerformACL, *custom_error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPerformACL", ctx, user)
	ret0, _ := ret[0].(entity.PerformACL)
	ret1, _ := ret[1].(*custom_error.CustomError)
	return ret0, ret1
}

// GetUserPerformACL indicates an expected call of GetUserPerformACL.
func (mr *MockIManagerACLMockRecorder) GetUserPerformACL(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPerformACL", reflect.TypeOf((*MockIManagerACL)(nil).GetUserPerformACL), ctx, user)
}

// GetUserSourceACL mocks base method.
func (m *MockIManagerACL) GetUserSourceACL(ctx context.Context, user *entity.User, datasource *entity.Datasource) (entity.DatasourceACL, *custom_error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSourceACL", ctx, user, datasource)
	ret0, _ := ret[0].(entity.DatasourceACL)
	ret1, _ := ret[1].(*custom_error.CustomError)
	return ret0, ret1
}

// GetUserSourceACL indicates an expected call of GetUserSourceACL.
func (mr *MockIManagerACLMockRecorder) GetUserSourceACL(ctx, user, datasource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSourceACL", reflect.TypeOf((*MockIManagerACL)(nil).GetUserSourceACL), ctx, user, datasource)
}

// GrantUserPerformACL mocks base method.
func (m *MockIManagerACL) GrantUserPerformACL(ctx context.Context, user *entity.User, acl entity.PerformACL) *custom_error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPerformACL", ctx, user, acl)
	ret0, _ := ret[0].(*custom_error.CustomError)
	return ret0
}

// GrantUserPerformACL indicates an expected call of GrantUserPerformACL.
func (mr *MockIManagerACLMockRecorder) GrantUserPerformACL(ctx, user, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPerformACL", reflect.TypeOf((*MockIManagerACL)(nil).GrantUserPerformACL), ctx, user, acl)
}

// GrantUserSourceACL mocks base method.
func (m *MockIManagerACL) GrantUserSourceACL(ctx context.Context, user *entity.User, datasource *entity.Datasource, acl entity.DatasourceACL) *custom_error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserSourceACL", ctx, user, datasource, acl)
	ret0, _ := ret[0].(*custom_error.CustomError)
	return ret0
}

// GrantUserSourceACL indicates an expected call of GrantUserSourceACL.
func (mr *MockIManagerACLMockRecorder) GrantUserSourceACL(ctx, user, datasource, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserSourceACL", reflect.TypeOf((*MockIManagerACL)(nil).GrantUserSourceACL), ctx, user, datasource, acl)
}

// RevokeUserPerformACL mocks base method.
func (m *MockIManagerACL) RevokeUserPerformACL(ctx context.Context, user *entity.User) *custom_error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserPerformACL", ctx, user)
	ret0, _ := ret[0].(*custom_error.CustomError)
	return ret0
}

// RevokeUserPerformACL indicates an expected call of RevokeUserPerformACL.
func (mr *MockIManagerACLMockRecorder) RevokeUserPerformACL(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserPerformACL", reflect.TypeOf((*MockIManagerACL)(nil).RevokeUserPerformACL), ctx, user)
}

// RevokeUserSourceACL mocks base method.
func (m *MockIManagerACL) RevokeUserSourceACL(ctx context.Context, user *entity.User, datasource *entity.Datasource) *custom_error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserSourceACL", ctx, user, datasource)
	ret0, _ := ret[0].(*custom_error.CustomError)
	return ret0
}

// RevokeUserSourceACL indicates an expected call of RevokeUserSourceACL.
func (mr *MockIManagerACLMockRecorder) RevokeUserSourceACL(ctx, user, datasource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserSourceACL", reflect.TypeOf((*MockIManagerACL)(nil).RevokeUserSourceACL), ctx, user, datasource)
}
