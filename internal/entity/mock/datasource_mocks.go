// Code generated by MockGen. DO NOT EDIT.
// Source: datasource.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vozalel/interview-crud-files/internal/entity"
	custom_error "github.com/vozalel/interview-crud-files/pkg/custom_error"
)

// MockIManagerDatasource is a mock of IManagerDatasource interface.
type MockIManagerDatasource struct {
	ctrl     *gomock.Controller
	recorder *MockIManagerDatasourceMockRecorder
}

// MockIManagerDatasourceMockRecorder is the mock recorder for MockIManagerDatasource.
type MockIManagerDatasourceMockRecorder struct {
	mock *MockIManagerDatasource
}

// NewMockIManagerDatasource creates a new mock instance.
func NewMockIManagerDatasource(ctrl *gomock.Controller) *MockIManagerDatasource {
	mock := &MockIManagerDatasource{ctrl: ctrl}
	mock.recorder = &MockIManagerDatasourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIManagerDatasource) EXPECT() *MockIManagerDatasourceMockRecorder {
	return m.recorder
}

// CreateDataSource mocks base method.
func (m *MockIManagerDatasource) CreateDataSource(ctx context.Context, datasource *entity.Datasource) *custom_error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSource", ctx, datasource)
	ret0, _ := ret[0].(*custom_error.CustomError)
	return ret0
}

// CreateDataSource indicates an expected call of CreateDataSource.
func (mr *MockIManagerDatasourceMockRecorder) CreateDataSource(ctx, datasource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSource", reflect.TypeOf((*MockIManagerDatasource)(nil).CreateDataSource), ctx, datasource)
}

// DeleteDataSource mocks base method.
func (m *MockIManagerDatasource) DeleteDataSource(ctx context.Context, datasource *entity.Datasource) *custom_error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSource", ctx, datasource)
	ret0, _ := ret[0].(*custom_error.CustomError)
	return ret0
}

// DeleteDataSource indicates an expected call of DeleteDataSource.
func (mr *MockIManagerDatasourceMockRecorder) DeleteDataSource(ctx, datasource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSource", reflect.TypeOf((*MockIManagerDatasource)(nil).DeleteDataSource), ctx, datasource)
}

// ExistDataSource mocks base method.
func (m *MockIManagerDatasource) ExistDataSource(datasource *entity.Datasource) (bool, *custom_error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistDataSource", datasource)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*custom_error.CustomError)
	return ret0, ret1
}

// ExistDataSource indicates an expected call of ExistDataSource.
func (mr *MockIManagerDatasourceMockRecorder) ExistDataSource(datasource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistDataSource", reflect.TypeOf((*MockIManagerDatasource)(nil).ExistDataSource), datasource)
}

// ListDataSources mocks base method.
func (m *MockIManagerDatasource) ListDataSources(ctx context.Context) ([]string, *custom_error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSources", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*custom_error.CustomError)
	return ret0, ret1
}

// ListDataSources indicates an expected call of ListDataSources.
func (mr *MockIManagerDatasourceMockRecorder) ListDataSources(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSources", reflect.TypeOf((*MockIManagerDatasource)(nil).ListDataSources), ctx)
}

// ReadDataSource mocks base method.
func (m *MockIManagerDatasource) ReadDataSource(ctx context.Context, datasource *entity.Datasource) *custom_error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDataSource", ctx, datasource)
	ret0, _ := ret[0].(*custom_error.CustomError)
	return ret0
}

// ReadDataSource indicates an expected call of ReadDataSource.
func (mr *MockIManagerDatasourceMockRecorder) ReadDataSource(ctx, datasource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDataSource", reflect.TypeOf((*MockIManagerDatasource)(nil).ReadDataSource), ctx, datasource)
}

// UpdateDataSource mocks base method.
func (m *MockIManagerDatasource) UpdateDataSource(ctx context.Context, datasource *entity.Datasource) *custom_error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSource", ctx, datasource)
	ret0, _ := ret[0].(*custom_error.CustomError)
	return ret0
}

// UpdateDataSource indicates an expected call of UpdateDataSource.
func (mr *MockIManagerDatasourceMockRecorder) UpdateDataSource(ctx, datasource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSource", reflect.TypeOf((*MockIManagerDatasource)(nil).UpdateDataSource), ctx, datasource)
}
